//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAManagement.AssessmentAgent.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateUser", ReplyAction="http://tempuri.org/IUser/ValidateUserResponse")]
        QAManagement.AssessmentAgent.UserService.ValidateUserResponse ValidateUser(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUser/ValidateUser", ReplyAction="http://tempuri.org/IUser/ValidateUserResponse")]
        System.IAsyncResult BeginValidateUser(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request, System.AsyncCallback callback, object asyncState);
        
        QAManagement.AssessmentAgent.UserService.ValidateUserResponse EndValidateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ResendPassword", ReplyAction="http://tempuri.org/IUser/ResendPasswordResponse")]
        QAManagement.AssessmentAgent.UserService.ResendPasswordResponse ResendPassword(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUser/ResendPassword", ReplyAction="http://tempuri.org/IUser/ResendPasswordResponse")]
        System.IAsyncResult BeginResendPassword(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request, System.AsyncCallback callback, object asyncState);
        
        QAManagement.AssessmentAgent.UserService.ResendPasswordResponse EndResendPassword(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Password;
        
        public ValidateUserRequest() {
        }
        
        public ValidateUserRequest(string Username, string Password) {
            this.Username = Username;
            this.Password = Password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidateUserResult;
        
        public ValidateUserResponse() {
        }
        
        public ValidateUserResponse(bool ValidateUserResult) {
            this.ValidateUserResult = ValidateUserResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResendPassword", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResendPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Username;
        
        public ResendPasswordRequest() {
        }
        
        public ResendPasswordRequest(string Username) {
            this.Username = Username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResendPasswordResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResendPasswordResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ResendPasswordResult;
        
        public ResendPasswordResponse() {
        }
        
        public ResendPasswordResponse(bool ResendPasswordResult) {
            this.ResendPasswordResult = ResendPasswordResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : QAManagement.AssessmentAgent.UserService.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public QAManagement.AssessmentAgent.UserService.ValidateUserResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((QAManagement.AssessmentAgent.UserService.ValidateUserResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResendPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResendPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public QAManagement.AssessmentAgent.UserService.ResendPasswordResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((QAManagement.AssessmentAgent.UserService.ResendPasswordResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<QAManagement.AssessmentAgent.UserService.IUser>, QAManagement.AssessmentAgent.UserService.IUser {
        
        private BeginOperationDelegate onBeginValidateUserDelegate;
        
        private EndOperationDelegate onEndValidateUserDelegate;
        
        private System.Threading.SendOrPostCallback onValidateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginResendPasswordDelegate;
        
        private EndOperationDelegate onEndResendPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResendPasswordCompletedDelegate;
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ValidateUserCompletedEventArgs> ValidateUserCompleted;
        
        public event System.EventHandler<ResendPasswordCompletedEventArgs> ResendPasswordCompleted;
        
        public QAManagement.AssessmentAgent.UserService.ValidateUserResponse ValidateUser(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request) {
            return base.Channel.ValidateUser(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateUser(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateUser(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public QAManagement.AssessmentAgent.UserService.ValidateUserResponse EndValidateUser(System.IAsyncResult result) {
            return base.Channel.EndValidateUser(result);
        }
        
        private System.IAsyncResult OnBeginValidateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            QAManagement.AssessmentAgent.UserService.ValidateUserRequest request = ((QAManagement.AssessmentAgent.UserService.ValidateUserRequest)(inValues[0]));
            return this.BeginValidateUser(request, callback, asyncState);
        }
        
        private object[] OnEndValidateUser(System.IAsyncResult result) {
            QAManagement.AssessmentAgent.UserService.ValidateUserResponse retVal = this.EndValidateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateUserCompleted(object state) {
            if ((this.ValidateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateUserAsync(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request) {
            this.ValidateUserAsync(request, null);
        }
        
        public void ValidateUserAsync(QAManagement.AssessmentAgent.UserService.ValidateUserRequest request, object userState) {
            if ((this.onBeginValidateUserDelegate == null)) {
                this.onBeginValidateUserDelegate = new BeginOperationDelegate(this.OnBeginValidateUser);
            }
            if ((this.onEndValidateUserDelegate == null)) {
                this.onEndValidateUserDelegate = new EndOperationDelegate(this.OnEndValidateUser);
            }
            if ((this.onValidateUserCompletedDelegate == null)) {
                this.onValidateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateUserCompleted);
            }
            base.InvokeAsync(this.onBeginValidateUserDelegate, new object[] {
                        request}, this.onEndValidateUserDelegate, this.onValidateUserCompletedDelegate, userState);
        }
        
        public QAManagement.AssessmentAgent.UserService.ResendPasswordResponse ResendPassword(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request) {
            return base.Channel.ResendPassword(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResendPassword(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResendPassword(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public QAManagement.AssessmentAgent.UserService.ResendPasswordResponse EndResendPassword(System.IAsyncResult result) {
            return base.Channel.EndResendPassword(result);
        }
        
        private System.IAsyncResult OnBeginResendPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request = ((QAManagement.AssessmentAgent.UserService.ResendPasswordRequest)(inValues[0]));
            return this.BeginResendPassword(request, callback, asyncState);
        }
        
        private object[] OnEndResendPassword(System.IAsyncResult result) {
            QAManagement.AssessmentAgent.UserService.ResendPasswordResponse retVal = this.EndResendPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResendPasswordCompleted(object state) {
            if ((this.ResendPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResendPasswordCompleted(this, new ResendPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResendPasswordAsync(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request) {
            this.ResendPasswordAsync(request, null);
        }
        
        public void ResendPasswordAsync(QAManagement.AssessmentAgent.UserService.ResendPasswordRequest request, object userState) {
            if ((this.onBeginResendPasswordDelegate == null)) {
                this.onBeginResendPasswordDelegate = new BeginOperationDelegate(this.OnBeginResendPassword);
            }
            if ((this.onEndResendPasswordDelegate == null)) {
                this.onEndResendPasswordDelegate = new EndOperationDelegate(this.OnEndResendPassword);
            }
            if ((this.onResendPasswordCompletedDelegate == null)) {
                this.onResendPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResendPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResendPasswordDelegate, new object[] {
                        request}, this.onEndResendPasswordDelegate, this.onResendPasswordCompletedDelegate, userState);
        }
    }
}
